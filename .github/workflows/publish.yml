name: publish

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  OLD_DOMAIN: http://localhost:8003
  NEW_DOMAIN: https://poison.carlosmaroto-daweb.com
  SQL_DUMP_FILE: dump/wordpress.sql
  TARGET_DIR: wordpress_files/wp-content/themes/poison
  DOCKER_IMAGE_1: poison-db:latest
  DOCKER_IMAGE_2: poison-wordpress:latest
  DOCKER_FILE_1: Dockerfile_db
  DOCKER_FILE_2: Dockerfile_wordpress
  DOCKER_CONTAINER_1: mysql_poison
  DOCKER_CONTAINER_2: wordpress_poison
  DOCKER_CONTAINER_3: phpmyadmin_poison
  DOCKER_VOLUME_1: poison_db_data
  DOCKER_VOLUME_2: poison_wordpress_data
  PORT_1: 8003
  PORT_2: 8004
  PORT_3: 9000
  SUBDOMAIN: poison.carlosmaroto-daweb.com

jobs:
  create-docker-images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN_CD }}

      - name: Build image
        run: |
          sed -i "s#$OLD_DOMAIN#$NEW_DOMAIN#g" $SQL_DUMP_FILE
          find $TARGET_DIR -type f -exec sed -i "s#${OLD_DOMAIN}#${NEW_DOMAIN}#g" {} +
          docker build -f $DOCKER_FILE_1 --tag ghcr.io/carlosmaroto-daweb/$DOCKER_IMAGE_1 .
          docker push ghcr.io/carlosmaroto-daweb/$DOCKER_IMAGE_1
          docker build -f $DOCKER_FILE_2 --tag ghcr.io/carlosmaroto-daweb/$DOCKER_IMAGE_2 .
          docker push ghcr.io/carlosmaroto-daweb/$DOCKER_IMAGE_2
  
  deploy:
    needs: create-docker-images
    runs-on: ubuntu-latest
    steps:
      - name: SSH into Server
        run: |
          echo "${{ secrets.AUTH_PASS }}" > rsa_key
          chmod 600 rsa_key
          ssh -i rsa_key -o StrictHostKeyChecking=no ${{ secrets.AUTH_SERVER }} << EOF
            sudo docker stop $DOCKER_CONTAINER_1 && sudo docker rm $DOCKER_CONTAINER_1
            sudo docker stop $DOCKER_CONTAINER_2 && sudo docker rm $DOCKER_CONTAINER_2
            sudo docker stop $DOCKER_CONTAINER_3 && sudo docker rm $DOCKER_CONTAINER_3
            sudo docker volume rm $(sudo docker volume ls -q | grep "$DOCKER_VOLUME_1")
            sudo docker volume rm $(sudo docker volume ls -q | grep "$DOCKER_VOLUME_2")
            sudo docker login ghcr.io -u carlosmaroto-daweb -p ${{ secrets.TOKEN_CD }}
            sudo docker pull ghcr.io/carlosmaroto-daweb/$DOCKER_IMAGE_1
            sudo docker pull ghcr.io/carlosmaroto-daweb/$DOCKER_IMAGE_2
            sudo echo '
              version: "3.1"
              services:
                $DOCKER_CONTAINER_1:
                  container_name: $DOCKER_CONTAINER_1
                  image: ghcr.io/carlosmaroto-daweb/$DOCKER_IMAGE_1
                  ports: 
                    - "$PORT_3:3306"
                  environment:
                    MYSQL_DATABASE: wordpress
                    MYSQL_USER: admin
                    MYSQL_PASSWORD: admin
                    MYSQL_ROOT_PASSWORD: root
                  volumes:
                    - $DOCKER_VOLUME_1:/var/lib/mysql
                $DOCKER_CONTAINER_2:
                  container_name: $DOCKER_CONTAINER_2
                  image: ghcr.io/carlosmaroto-daweb/$DOCKER_IMAGE_2
                  ports: 
                    - "$PORT_1:80"
                  environment:
                    WORDPRESS_DB_HOST: $DOCKER_CONTAINER_1:3306
                    WORDPRESS_DB_USER: admin
                    WORDPRESS_DB_PASSWORD: admin
                    WORDPRESS_DB_NAME: wordpress
                  volumes:
                    - $DOCKER_VOLUME_2:/var/www/html
                $DOCKER_CONTAINER_3:
                  container_name: $DOCKER_CONTAINER_3
                  image: phpmyadmin/phpmyadmin
                  links: 
                    - $DOCKER_CONTAINER_1:db
                  ports:
                    - $PORT_2:80
                  environment:
                    MYSQL_USER: admin
                    MYSQL_PASSWORD: admin
                    MYSQL_ROOT_PASSWORD: root
              volumes:
                $DOCKER_VOLUME_1:
                $DOCKER_VOLUME_2:
            ' >> docker-compose.yml
            sudo docker compose up -d
            sudo rm docker-compose.yml
            sudo systemctl stop nginx
            if [ ! -f /etc/nginx/sites-available/$SUBDOMAIN ]; then
              sudo touch /etc/nginx/sites-available/$SUBDOMAIN
              sudo ln -s /etc/nginx/sites-available/$SUBDOMAIN /etc/nginx/sites-enabled/$SUBDOMAIN
              sudo certbot certonly --standalone -d $SUBDOMAIN --cert-name $SUBDOMAIN --non-interactive --agree-tos --email carlosmaroto.daweb@gmail.com
            fi
            sudo echo '
            server {
              listen 80;
              server_name $SUBDOMAIN;

              return 301 https://\$host\$request_uri;
            }

            server {
              listen 443 ssl;
              server_name $SUBDOMAIN;

              ssl_certificate /etc/letsencrypt/live/$SUBDOMAIN/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/$SUBDOMAIN/privkey.pem;

              location / {
                proxy_pass http://localhost:$PORT_1;
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto \$scheme;
              }

              location /phpmyadmin/ {
                rewrite ^/phpmyadmin/(.*)$ /\$1 break;
                proxy_pass http://localhost:$PORT_2;
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto \$scheme;
                proxy_redirect ~^(/.*)$ /phpmyadmin\$1;
              }
            }' > /tmp/nginx_site_config
            sudo mv /tmp/nginx_site_config /etc/nginx/sites-available/$SUBDOMAIN
            sudo systemctl start nginx
          EOF